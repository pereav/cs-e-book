Screen Processing
Chapter 10
Objectives
	1) Recall screen processing techniques.
	2) Implement these techniques in developing assembly programs.
	3) Acknowledge the significance of interrupt functions in using these techniques.

THE MONITOR

A typical video screen has eighty (80) columns numbered form 0 to 79 and twenty five (25) rows numbered from 0 to 24. The columns and rows provide a grid of addressable locations at any one of which the cursor can be set. The table below shows the example of cursor location:

	----------------------------------------------------------------------------------------------------------------
	SCREEN 		|		COLUMN NO.		|		ROW NO.			|		COLUMN NO.			|		ROW NO.
				|---------------------------------------------------------------------------------------------------
	LOCATION 	|				In Decimal Value				|					In Hexademical Value
	----------------------------------------------------------------------------------------------------------------

	Upper Left			 0						0							00h						00h
	Corner

	Upper Right			79						0							5Fh						00h
	Corner

	Center of 			40						12							28h						0Ch
	Screen

	Lower Left 			0						24							00h						18h
	Corner

	Lower Right			79						24							4Fh						18h
	Corner

																											(table)

CLEARING THE SCREEN IN ASSEMBLY APPROACH

Itnterrupt 10h function 06h handles the process of clearing the screen and scrolling. You can clear all or part of the display beginning at any screen location and ending at any higher-numberd location. The following sample code shows how to create the clear screen code in assembly :

------------------------------------------------------------------------------
MOV AH, 0600h	;	AH = 00h (Scroll); AL = 00h (Full Screen)
MOV BH, 07h		;	0 (Black Background), 7 (White Text Color)
MOV CX, 0000h	;	CH = 00h (Row), CL = 00h (Column)
MOV DX, 184Fh	;	DH = 18h (Row), DL = 4Fh (Column)
INT 10h			;	call interrrupt service
------------------------------------------------------------------------------

SETTING THE CURSOR POSITION

In text mode, setting the cursor position is a common requirement, because its position determines where the next character is to be displayed. Again, interrupt 10h is the BIOS operation for screen handling and function 02h in the AH tells the operation to set the cursor.

------------------------------------------------------------------------------
MOV AH, 02h		;	request to set the cursor position
MOV BH, 00h		;	page number 0
MOV DH, 0Ah		;	Row = 10 in decimal
MOV DL, 08h		;	Column = 0 in decimal
INT 10h			;	call interrrupt service
------------------------------------------------------------------------------

DISPLAYING THE CHARACTER 'x' AT THE CENTER OF THE SCREEN

------------------------------------------------------------------------------
title activity.asm
code segment
	 assume cs:code;ds:code
	 org 100h

begin :
		mov ax, 0600h		;	AH = 06h (Scroll); AL = 00h (Full Screen)
		mov bh, 07h			;	0 (Black Background), 7 (White Text Color)
		mov cx, 0000h 		;	CH = 00h (Row), CL = 00h (Column)
		mov dx, 184fH 		;	DH = 18h (Row), DL = 4Fh (Column)
		int 10h 			;	call interrrupt service

		mov ah, 02h			;	request to set the cursor position
		mov bh, 00h 		;	page number 0
		mov dh, 0ch 		;	Row = 12 in decimal
		mov dl, 28h 		;	Column = 40 in decimal
		int 10

		mov ah, 02			;	DOS service Display Single Character
		mov dl, 41h			;	ASCII Capital 'A'
		int 21h				;	call interrupt service

		mov ax, 4c00h
		int 21h

code ends
	end begin
---------------------------------------------------------------------------------


DISPLAYING THE STRING 'RTU' AT THE CENTER OF THE SCREEN

------------------------------------------------------------------------------
title activity.asm
code segment
	 assume cs:code;ds:code
	 org 100h

begin :
		jmp start
msg1 : db "RTU$"

start :
		mov ax, 0600h		;	AH = 06h (Scroll); AL = 00h (Full Screen)
		mov bh, 07h			;	0 (Black Background), 7 (White Text Color)
		mov cx, 0000h 		;	CH = 00h (Row), CL = 00h (Column)
		mov dx, 184fH 		;	DH = 18h (Row), DL = 4Fh (Column)
		int 10h 			;	call interrrupt service

		mov ah, 09h			;	request to set the cursor position
		mov bh, 00h 		;	page number 0
		mov dh, 0ch 		;	Row = 12 in decimal
		mov dl, 28h 		;	Column = 40 in decimal
		int 10

		mov ah, 09h					;	DOS service Display Single Character
		mov dx, OFFESET msg1		;	ASCII Capital 'A'
		int 21h						;	call interrupt service

		mov ax, 4c00h
		int 21h

code ends
	end begin
---------------------------------------------------------------------------------

DISPLAY ASCII CHARACTER SET
Among the extended ASCII characters 128d to 255d (80h - FFh) are a number of special symbols that are useful for displaying prompts, menus, and logs. Here are some of them:

CHARACTER 			SINGLE LINE 			HEX CODE 			DOUBLE LINE 			HEX CODE
--------------------------------------------------------------------------------------------------
Straight Lines:
 Horizontal Line 		-					   C4					- 						CD

 Vertical Line 			| 					   B3 					| 						BA

Corners :
 Top Left 				,					   DA 					, 						C9

 Bottom Right 			, 					   D9  					, 						BC

 Top Right 				, 					   BF 					, 						BB

 Bottom Left 			, 					   C0 				    ,						C8

 																							(table)
COLOR CHART
For colored monitors, the background can display one out of eight colors and text can display one of sixteen colors

      Color 			HEX CODE 		INTENSITY		RED 	GREEN 	 BLUE

Black 						0				0			 0		  0 	  0

Blue						1				0			 0		  0 	  1

Green 						2 				0			 0		  1 	  0

Cyan 						3 				0			 0		  1	  	  1

Ted 						4				0			 1		  0 	  0

Magenta	 					5				0			 1		  0 	  1

Brown 						6				0			 1		  1 	  0

White	 					7				0			 1		  1 	  1

Gray 						8				1			 0		  0 	  0

Light blue 					9				1			 0		  0 	  1

Light green 				A 				1			 0		  1 	  0

Light cyan 					B 				1			 0		  1 	  1

Light red 					C 				1			 1		  0 	  0

Light magenta 				D 				1			 1		  0 	  1

Yellow 						E 				1			 1		  1 	  0

High Intensity White 		F 				1			 1		  1 	  1

																			(table)

TEXT AND BACK GROUND COLORS
Here is an example of how to set the text and background colours and how to make them blink, where BL below means blinking.

-------------------------------------------------------------------------------------------------------------------------------------
BACKGROUND COLOR 				|	TEXT COLOR 						|	 HEX 	|			
--------------------------------------------------------------------|   CODE 	|						MEANING
BL 		R 		G 		B 		|	I 		R 		G 		B 		|   		|
------------------------------------------------------------------------------------------------------------------------------------

0		0		1		0			1		0		0		0			28			Green Background Color, Gray Text Color
																						
1		0		1		0			1		0		0		0			0AB			Green Background Color ,Gray Text Color, Blinking
	
0		1		1		0			0		0		0		1			61 			Brown Background Color, Blue Text Color

1		1		1		0			0		0		0		1			OE1			Brown Background Color, Blue Text Color, Blinking
--------------------------------------------------------------------------------------------------------------------------------------
																														(table)

DISPLAYING CHARACTER 'x' WITH ATTRIBUTES
We are going to modify the previous program that displays the character 'x' at the center of the screen. This time we are going to add some attributes. Character 'x' will be displayed with green background and cyan text colors, respectively.

 ------------------------------------------------------------------------------
title activity.asm
code segment
	 assume cs:code;ds:code
	 org 100h

begin :
		mov ax, 0600h		;	AH = 06h (Scroll); AL = 00h (Full Screen)
		mov bh, 07h			;	0 (Black Background), 7 (White Text Color)
		mov cx, 0000h 		;	CH = 00h (Row), CL = 00h (Column)
		mov dx, 184fH 		;	DH = 18h (Row), DL = 4Fh (Column)
		int 10h 			;	call interrrupt service

		mov ah, 02h			;	request to set the cursor position
		mov bh, 00h 		;	page number 0
		mov dh, 0ch 		;	Row = 12 in decimal
		mov dl, 28h 		;	Column = 40 in decimal
		int 10

		mov ah, 09h			;	request character display with attributes
		mov bh, 00h 		;	bl = 00 page number 0
		mov bl, 23h 		; 	bl = 2 (Green BG), 3 (Cyan TC)
		mov cx, 0002h		;	number of times to display on screen

		mov ah, 02			;	Display Single Character
		mov dl, 41h			;	character to display letter 'e'
		int 21h				

		mov ax, 4c00h
		int 21h

code ends
	end begin
---------------------------------------------------------------------------------


DISPLAYING THE STRING 'RTU' WITH ATTRIBUTES

------------------------------------------------------------------------------
title activity.asm
code segment
	 assume cs:code;ds:code
	 org 100h

begin :
		jmp start
A : 	db "RTU$"

start :
		mov ax, 0600h		;	AH = 06h (Scroll); AL = 00h (Full Screen)
		mov bh, 07h			;	0 (Black Background), 7 (White Text Color)
		mov cx, 0000h 		;	CH = 00h (Row), CL = 00h (Column)
		mov dx, 185fH 		;	DH = 18h (Row), DL = 4Fh (Column)
		int 10h 			;	call interrrupt service

		mov ah, 13h			;	request to set the cursor position
		mov al, 00h 		; 	do not advance the cursor
		mov bh, 00h 		;	page number 0
		mov bl, 28h 		;	2 (Green BG), 8 (Gray TC)
		mov bp, Offset A 	;	Address of the string
		mov dh, 0ch 		;	Row = 12 in decimal
		mov dl, 27h 		;	Column = 39 in decimal
		int 10

		mov ax, 4c00h
		int 21h

code ends
	end begin
---------------------------------------------------------------------------------