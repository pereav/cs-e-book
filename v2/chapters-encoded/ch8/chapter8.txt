

CHAPTER 8

OBJECTIVES

At the end of the chapters, the learners are expected to:

- Comprehend how to create a program in assembly.

- Construct unpretentious but logical assembly language programs. Realize the benefits of understanding the structure of the assembly language.


COMPUTER SYSTEMS ORGANIZATION WITH ASSEMBLY LANGUAGE
-----------------------------------------------------
UNDERSTANDING THE ASSEMBLY LANGUAGE PROGRAM



<b>CREATING YOUR OWN ASSEMBLY LANGUAGE PROGRAM</b>

Now, your task is to code a simple assembly language program. Here's how to do it:

Step 1: Open the text editor (edit.com) by typing edit, followed by a space, a filename with the extension of .ASM from the command prompt and press ENTER key.

	C:\>edit myprogram.asm

Note:
	The base name for your filename must not exceed to eight (8) characters.

	Parts of a Filename
		- Base name
		- Dot symbol
		- Extension name

	Format of Filename Structure
		<base name> . <extension name>

//picture 1 #TODO


Step 2:		Then, you can type now your program, just like using an MS Word application.

		Key in the given program:


		------------------------------------------------------
		  TITLE MYPROG.ASM
		  DOSSEG
		  .MODEL SMALL
		  .STACK 0100h
		  .DATA
		  		X DB "Kumusta, RTU!$"
		  .CODE
		  		MOV AX, @DATA
		  		MOV DS, AX

		  		MOV AH, 09h
		  		MOV DX, OFFSET X
		  		INT 21h

		  		MOV AX, 4C00h
		  		INT 21h

		  END
		  ----------------------------------------------------

<b>SAVING YOUR WORK</b>

After typing the code, save your work by pressing Alt-f, use the arrow down key to choose Save, and press ENTER key.

<b>EXITING THE EDITOR</b>

Now it's time to exit from the text editor and go back to DOS environment. To do this, press Alt-F, choose Exit, and press ENTER key.

<b>STRUCTURE OF AN ASSEMBLY LANGUAGE PROGRAM</b>

This is how a simple assembly language program looks like. Indent if possible for readability purposes.

			--------------------------------------------------
			  title my.asm
			  code segment
			  		assume cs:code;ds:code
			  		org 100h
			  begin:



			---------------------------------------------------

<b>INSTRUCTIONS FOR INITIALIZING THE PROGRAM

			--------------------------------------------------
			  title my.asm
			  code segment
			  		assume cs:code;ds:code
			  		org 100h
			  begin:



			---------------------------------------------------

<b>INSTRUCTIONS FOR CONCLUDING THE PROGRAM</b>

			---------------------------------------------------
			  MOV AX, 4C00h
			  INT 21h
			END
			---------------------------------------------------



<b>EXAMPLES OF ASSEMBLY LANGUAGE PROGRAMS</b>
- Displaying a character (uppercase 'A') on screen.

			---------------------------------------------------
			  TITLE myprog.asm 		; name of the program
			  code segment
			  		assume cs:code;ds:code
			  		org 100h
			  begin:
			  		mov ah, 02h		;request display character
			  		mov dl, 41h		;ASCII character 'A' to display
			  		int 21h			;call interrupt

			  		mov ax, 4c00h 	;end
			  		int 21h

			  code ends
			  		end begin
			---------------------------------------------------

- Displaying character (lowercase 'b') twice on the screen

			---------------------------------------------------
			  TITLE myprog.asm 		; name of the program
			  code segment
			  		assume cs:code;ds:code
			  		org 100h
			  begin:
			  		mov ah, 02h		;request display character
			  		mov dl, 62h		;ASCII character 'b' to display
			  		int 21h			;call interrupt
			  		int 21h			;call interrupt
			  		mov ax, 4c00h 	;end
			  		int 21h
			  code ends
			  		end begin
			---------------------------------------------------

- Using control characters (0A - Line Feed and 0D - Carriage Return) in a screen display.

			---------------------------------------------------
			  TITLE MYPROG.ASM 		; name of the program
			  code segment
			  		assume cs:code;ds:code
			  		org 100h
			  begin:
			  		mov ah, 02h		; request display character
			  		mov dx, 41h		; character 'A'
			  		int 21h			; call interrupt service
			  		mov dl, 0ah		; line feed character
			  		int 21h			; call interrupt service
			  		mov dlm 0dh		; carriage return character
			  		int 21h			; call interrupt service
			  		mov dl, 44h		; character 'D'
			  		int 21h			; call interrupt service
			  		mov dl, 0ah		; line feed character
			  		int 21h			; call interrupt service
			  		mov dl, 0dh		; carriage return character
			  		int 21h			; call interrupt service
			  		mov dl, 55h		; character 'U'
			  		int 21h			; call interrupt service

			  		mov ax, 4c00h 	;end
			  		int 21h
			  code ends
			  		end begin
			---------------------------------------------------

- Displaying the same character (lowercase 'z') thirty times using LOOP on the screen.

			---------------------------------------------------
			  TITLE MYPROG.ASM 		; name of the program
			  code segment
			  		assume cs:code;ds:code
			  		org 100h
			  begin:
			  		MOV CX, 001Eh	; setting the numbers of loops
			  		MOV AH, 02h		; request display characters
			  		MOV DL, 7Ah		; character to display
			  	A:	INT 21h			; call interrupt service
			  		LOOP B 			; go to label A

			  		MOV AX, 4C00h 	;end
			  		INT 21h
			  code ends
			  		end begin
			---------------------------------------------------

- Displaying different characters ('A' to 'Z') using LOOP on the same line


			---------------------------------------------------
			  TITLE MYPROG.ASM 		; name of the program
			  code segment
			  		assume cs:code;ds:code
			  		org 100h
			  begin:
			  		MOV CX, 001Ah	; setting the numbers of loops
			  		MOV AH, 02h		; request display characters
			  		MOV DL, 'A'		; character 'A'
			  	B:	INT 21h			; call interrupt service
			  		INC DL 			; add 1 to the value of DL
			  		LOOP B 			; go to label B
					MOV AX, 4C00h 	;end
			  		INT 21h
			  code ends
			  		end begin
			---------------------------------------------------

- Display characters ('0' to '9') using LOOP vertically.

			---------------------------------------------------
			  TITLE MYPROG.ASM 		; name of the program
			  code segment
			  		assume cs:code;ds:code
			  		org 100h
			  begin:
			  		MOV CX, 001Ah	; setting the numbers of loops
			  		MOV AH, 02h		; request display characters
			  		MOV DL, 30h		; character '0'
			  	C:	INT 21h			; call interrupt service
			  		MOV BL, DL 		; temporarily store the value of DL to BL
			  		MOV DL, 0Ah 	; line feed character
			  		INT 21h 		; call interrupt service
			  		MOV DL, 0Dh 	; carriage return character
			  		INT 21h 		; call interrupt service
			  		MOV DL, BL 		; BL transfer back the value to DL
			  		INC DL 			; add 1 to the value of DL
			  		LOOP C 			; go to label C
			  	
					MOV AX, 4C00h 	; end
			  		INT 21h
			  code ends
			  		end begin
			---------------------------------------------------

- Displaying different characters ('0' to '9') using LOOP with separator (underscore) horizontally.


			---------------------------------------------------
			  TITLE MYPROG.ASM 		; name of the program
			  code segment
			  		assume cs:code;ds:code
			  		org 100h
			  begin:
			  		MOV CX, 001Ah	; setting the numbers of loops
			  		MOV AH, 02h		; request display characters
			  		MOV DL, 30h		; character '0'
			  	A:	INT 21h			; call interrupt service
			  		MOV BL, DL 		; temporarily store the value of DL to BL
			  		MOV DL, 5Fh 	; underscore character
			  		INT 21h 		; call interrupt service
			  		MOV DL, BL 		; BL transfer back the value to DL
			  		INC DL 			; add 1 to the value of DL
			  		LOOP A 			; go to label A
			  	
					MOV AX, 4C00h 	; end
			  		INT 21h
			  code ends
			  		end begin
			---------------------------------------------------

- Displaying string ('computer') on screen


			---------------------------------------------------
			  TITLE MYPROG.ASM 		; name of the program
			  code segment
			  		assume cs:code;ds:code
			  		org 100h
			  begin:
			  		MOV AH, 09h				; request display string
			  		MOV DX, OFFSET msg1 	; load address of the string
			  		INT 21h 				; call interrupt service

			  		MOV AX, 4C00h 			; end
			  		INT 21h

			  msg1 : DB "Computer!$"
			  		
			  code ends
			  		end begin
			---------------------------------------------------
